#include <iostream>

using namespace std;

/*
    bubble sort = pairs of adjacent elements are compared, and the elements
                    swapped if they are not in order.

                 Quadratic time O(n^2)
                 small data set = okay-ish
                 large data set = BAD (plz don't)

    selection sort = search through an array and keep track of the minimum value during
                    each iteration. At the end of each iteration, we swap values.

                 Quadratic time O(n^2)
                 small data set = okay
                 large data set = BAD
*/

bool debounce;

void bubbleSort(int arr[], int n) {
    debounce = true;
  for (int i = 0; i < n - 1; i++) {
    for (int j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) { //change greater sign to reverse order
        swap(arr[j], arr[j + 1]);
      }
    }
  }
}

void selectionSort(int arr[], int n) {
    debounce = false;
  for (int i = 0; i < n - 1; i++) {
    int minIndex = i;
    for (int j = i + 1; j < n; j++) {
      if (arr[j] < arr[minIndex]) {
        minIndex = j;
      }
    }
    swap(arr[i], arr[minIndex]);
  }
}

int main()
{
    cout << "\n--------------- Welcome to Bubble Sort practice! ---------------\n" << endl;

    int arr[] = {9, 1, 8, 2, 7, 3, 6, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]); //Get the size of the array

    //print array
    cout << "Array: ";
    for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
    }
    cout << endl;

    //call bubbleSort function
    bubbleSort(arr, n);

    //call SelectionSort function
    //selectionSort(arr, n);


    if(debounce){
        cout << "Bubble Sorted array: ";
        for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";}
        cout << endl;
    }
    else if(!debounce){
        cout << "Selection Sorted array: ";
        for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";}
        cout << endl;
    }

    /*
    //print sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
    }
    cout << endl;
    */

    return 0;
}
